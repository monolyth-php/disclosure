{"name":"Disclosure","tagline":"PHP5 depdendency injection framework","body":"# Disclosure\r\nPHP5 dependency injection and service locator framework.\r\nMost existing DI or Inversion of Control (IoC) solutions depend on extensive\r\nconfiguration files to define dependencies. This sucks; Disclosure is better\r\nand simpler (we think).\r\n\r\nFull documentation: http://disclosure.readthedocs.org/en/latest/\r\n\r\n## Installation\r\n\r\n### Composer (recommended)\r\n\r\nAdd \"monomelodies/disclosure\" to your `composer.json` requirements:\r\n\r\n    {\r\n        \"require\": {\r\n            \"monomelodies/disclosure\": \">=0.1\"\r\n        }\r\n    }\r\n\r\n### Manual installation\r\n\r\n1. Get the code;\r\n    1.1. Clone the repository, e.g. from GitHub;\r\n    1.2. Download the ZIP (e.g. from Github) and extract.\r\n2. Make your project recognize Reroute:\r\n    2.1. Register `/path/to/reroute/src` for the namespace `Reroute\\\\` in your\r\n        PSR-4 autoloader (recommended);\r\n    2.2. Alternatively, manually `include` the files you need.\r\n\r\n## Usage\r\n\r\nTell your classes what they should depend on using in `inject` method supplied\r\nby the `Injector` trait:\r\n\r\n    <?php\r\n\r\n    use Disclosure\\Injector;\r\n\r\n    class MyClass\r\n    {\r\n        use Injector;\r\n\r\n        public function __construct()\r\n        {\r\n            $this->inject(function (MyDependency $foo) {});\r\n        }\r\n    }\r\n\r\n    class MyDependency\r\n    {\r\n    }\r\n\r\n    $myInstance = new MyClass;\r\n    var_dump($myInstance->foo instanceof MyDependency); // true\r\n\r\nFor a list of full examples including type hinding, marker interfaces,\r\ninheritance and more, see the official documentation.\r\n\r\n_Whoah!_ Why not simply do `$this->foo = new MyDependency;` in the constructor?\r\n\r\nFor a number of reasons:\r\n\r\n- MyDependency could just be an interface;\r\n- $foo could be previously resolved with a subclass or mock of MyDependency;\r\n- In normal usage, there is only one $foo instance which this enforces without\r\n    having to resort to all kinds of Singleton mockery;\r\n- The injecting closure can perform operations on `$foo`;\r\n- There is now no tight coupling;\r\n- The closure can be anything callable, including regular functions or class\r\n    methods, which - if you like that - can be defined in an external file;\r\n- Direct assignment causes tight coupling.\r\n\r\nYes, in the above example it doesn't add much, but see the complete\r\ndocumentation for real-world, practical examples of why dependency injection\r\nis generally a good idea.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}